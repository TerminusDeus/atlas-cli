package main

import (
	"github.com/grpc-ecosystem/go-grpc-middleware"
	"github.com/jinzhu/gorm"
	"github.com/sirupsen/logrus"
	"google.golang.org/grpc"
)

func CreateServer(logger *logrus.Logger, db *gorm.DB, interceptors []grpc.UnaryServerInterceptor) (*grpc.Server, error) {
	// create new gRPC grpcServer with middleware chain
	grpcServer := grpc.NewServer(
	grpc.KeepaliveParams(
		keepalive.ServerParameters{
			Time:    time.Duration(viper.GetString("config.keepalive.time")) * time.Second,
			Timeout: time.Duration(viper.GetString("config.keepalive.timeout")) * time.Second,
		},
	),grpc.UnaryInterceptor(grpc_middleware.ChainUnaryServer(interceptors...)))
	
	// register all of our services into the grpcServer
{{ range $r := .R }}
	{{$r.NameSnake}}, err := svc.New{{$r.NameCamels}}Server({{ if .WithDatabase}} db {{ end }})
	if err != nil {
		return nil, err
	}
	pb.Register{{$r.NameCamels}}Server(grpcServer, {{$r.NameSnake}})
{{ end }}
	return grpcServer, nil
}
